apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    def buildDirPath = layout.buildDirectory.get().asFile

    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName
            if (!productFlavorName) {
                sourceName = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            def excludes = [
                    '**/BuildConfig.*',
                    '**/*_Impl*.*',
                    '**/*Binding.*',
                    '**/*Double.*',
                    '**/*Test.*'
            ]

            def classKotlin = fileTree(dir: "$buildDirPath/tmp/kotlin-classes/${sourceName}UnitTest", excludes: excludes)
            def classJava = fileTree(dir: "$buildDirPath/intermediates/javac/${sourceName}/classes", excludes: excludes)

            def kotlinSrc = "$project.projectDir/src/main/kotlin"
            def javaSrc = "$project.projectDir/src/main/java"
            def flavourSrc = "$project.projectDir/src/$productFlavorName/java"

            task "test${sourceName.capitalize()}Coverage"(type: JacocoReport, dependsOn: ["$testTaskName"]) {
                group = "QuoteUnquote"
                description = "Generate Jacoco /test coverage report from ${sourceName.capitalize()}"

                classDirectories.setFrom(files([classKotlin, classJava]))

                sourceDirectories.setFrom(files([javaSrc, kotlinSrc, flavourSrc]))

                executionData.from = fileTree(dir: "${buildDirPath}", includes: [
                        "jacoco/${testTaskName}.exec"
                ])

                reports {
                    xml.required = true
                    xml.outputLocation.set(file("${buildDirPath}/reports/${sourceName.capitalize()}.xml"))
                    html.required = true
                    html.outputLocation.set(file("$buildDirPath/reports/jacoco"))
                }
            }
        }
    }
}
